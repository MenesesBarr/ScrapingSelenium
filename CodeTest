import requests
import pandas as pd
import re
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from time import sleep

#lista de produtos
description = ['Smart TV LED 32" TCL HDR 32S6500','Headset Gamer com Microfone JBL Quantum 100',
'Caixa de Som Bluetooth JBL Flip 5']
#lista de preços 
listPrice = []
listPrice2 = []
listPrice3 = []
listPrice4 = []
listPrice51 = []
listPrice5 = []
options = Options()

# options.add_argument('--headless')
options.add_argument('window-size=1000,1000')

navegador = webdriver.Chrome(options=options) 
""" 
######  Magalu  ###################################################################
navegador.get('https://www.magazineluiza.com.br/')

sleep(0.5)
#preciso de um for aqui com a lista das descr. dos produtos
#esperar que o html seja estático
for desc in description : 
    inputMagalu = navegador.find_element_by_css_selector('.field-input-search.ui-autocomplete-input')
    inputMagalu.send_keys(desc)

    sleep(1)

    searchProduct = navegador.find_element_by_class_name('icon-search').click()

    sleep(1)

    product = navegador.find_element_by_css_selector('.sc-gpAxqO.cEqyhT').click()

    sleep(1)
    page_content = navegador.page_source

    site = BeautifulSoup(page_content, 'html.parser')

    #print(site.prettify())

    preco = site.find('span', attrs={'class': 'price-template__text'})
    
    listPrice.append([preco.text]) 
    


#lista de preços para pandas
#print(listPrice)

#dados = pd.DataFrame(listPrice, columns=['price'])

#print(dados)   """

########  Americanas #########################################################
navegador.get('https://www.americanas.com.br/')

sleep(0.5)
#preciso de um for aqui com a lista das descr. dos produtos
#esperar que o html seja estático
for desc in description : 
    inputMagalu = navegador.find_element_by_class_name('src-input')
    inputMagalu.send_keys(desc)

    sleep(1)

    searchProduct = navegador.find_element_by_class_name('src-btn').click()

    sleep(1)

    product = navegador.find_element_by_css_selector('.src__Wrapper-sc-1k0ejj6-3.eflURh').click()

    sleep(1)
    page_content = navegador.page_source

    site = BeautifulSoup(page_content, 'html.parser')

    #print(site.prettify())

    price = site.find('div', attrs={'class': 'src__BestPrice-sc-1jvw02c-5 cBWOIB priceSales'})
    item = price.text

    #biblioteca regex = manipulação de strings por expressões regulares
    preco = re.sub(r'[A-Z$]','',item)
    listPrice2.append(preco)   



""" ######### Mercado Livre #######################################################
navegador.get('https://www.mercadolivre.com.br/')

sleep(0.5)
#preciso de um for aqui com a lista das descr. dos produtos
#esperar que o html seja estático
for desc in description : 
    inputMercadoLivre = navegador.find_element_by_class_name('nav-search-input')
    inputMercadoLivre.send_keys(desc)   
    
    sleep(1)

    searchProduct = navegador.find_element_by_class_name('nav-search-btn').click()

    sleep(1)

    product = navegador.find_element_by_class_name('ui-search-layout__item').click()

    sleep(1)

    clearText = navegador.find_element_by_class_name('nav-search-input').clear()
    
    sleep(1)
    page_content = navegador.page_source

    site = BeautifulSoup(page_content, 'html.parser')

    #print(site.prettify())

    Real = site.find('span', attrs={'class': 'price-tag-fraction'}).text
    Centavos = site.find('span', attrs={'class': 'price-tag-cents'}).text 
    lista = [Real,Centavos]
    preco = ','.join(lista)

    #if (Centavos):
    #    Price = ','.join(lista)
    #else:
    #    Price = (Real.text)
    #break
    listPrice3.append(price)



#####  Amazon  ##################################################################
navegador.get('https://www.amazon.com.br/')

sleep(0.5)
#preciso de um for aqui com a lista das descr. dos produtos
#esperar que o html seja estático
for desc in description : 
    inputMagalu = navegador.find_element_by_id('twotabsearchtextbox')
    inputMagalu.send_keys(desc)
    

    sleep(1)

    searchProduct = navegador.find_element_by_id('nav-search-submit-button').click()

    sleep(1)

    product = navegador.find_element_by_css_selector('.a-section.a-spacing-medium').click()
    
    sleep(1)

    clearText = navegador.find_element_by_id('twotabsearchtextbox').clear()
    
    sleep(1)
    page_content = navegador.page_source

    site = BeautifulSoup(page_content, 'html.parser')

    #print(site.prettify())

    price = site.find('span', attrs={'class': 'a-size-medium a-color-price'})
    item = price.text
    preco = ','.join([int(s) for s in item.split() if s.isdigit()])

    listPrice4.append(preco) 

 
 #####  ZOOM ######################################################################
#Problema: Patrocinado
navegador.get('https://www.zoom.com.br/')

sleep(0.5)
#preciso de um for aqui com a lista das descr. dos produtos
#esperar que o html seja estático. Se houver mudança no html script n da certo.
for desc in description : 
    inputZoom = navegador.find_element_by_css_selector('.react-autosuggest__input.search-bar__text-box')
    inputZoom.send_keys('Smart TV LED 32" TCL HDR 32S6500')
    
    sleep(1)

    searchProduct = navegador.find_element_by_class_name('search-bar__submit-button').click()
    
    #Pretendo fazer um if para bot identificar patrocinados********************
    #sleep(3)
    #page_content = navegador.page_source

    #site = BeautifulSoup(page_content, 'html.parser')
    #print(site.prettify())
    #patrocinadoZoom = site.find('span', attrs={'class': 'Text_Text___RzD- Text_LabelXsRegular__2Ax6x Badge_Label__2vAVv'}).text
    
    sleep(1)
    #if patrocinadoZoom :
        #product = navegador.find_element_by_xpath('//*[@id="resultArea"]/div[2]/div/ul/li[1]/article/span/a').click()
    #else :
    #product = navegador.find_element_by_xpath('//*[@id="resultArea"]/div[2]/div/ul/li[2]/article/span/a').click()
   
    #LimparZoom = navegador.find_element_by_css_selector('.react-autosuggest__input.search-bar__text-box').clear()
    
    sleep(5)
    page_content = navegador.page_source

    site = BeautifulSoup(page_content, 'html.parser')

    #print(site.prettify())
    for price in site.find_all('strong', attrs={'class': 'Text_Text___RzD- Text_LabelMdBold__3KBIj CellPrice_MainValue__3s0iP'}):
    
        listPrice51.append([price.text]) 
listPrice5.append(listPrice51) """
#print(listPrice) 
print(listPrice2) 
#print(listPrice3) 
#print(listPrice4)  
#print(listPrice5)
